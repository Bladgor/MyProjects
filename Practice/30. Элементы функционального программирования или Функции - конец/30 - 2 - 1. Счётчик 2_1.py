# Задача 1. Счётчик 2
# Как-то мы уже создавали декоратор counter, который считает и выводит количество вызовов декорируемой функции.
# Для этого мы использовали интересную особенность классов. В этот раз реализуйте тот же декоратор,
# но уже с использованием знаний о локальных и глобальных переменных.
#
# Реализуйте декоратор двумя способами:
# используя глобальную переменную count;
# используя локальную переменную count внутри декоратора.
#
# Дополнительно: найдите команду (в интернете или даже сами), которая перечисляет все функции и методы,
# находящиеся во встроенном пространстве имён в Python.
#
# Результат выполнения команды:
# ['__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__'  ну и так далее.

def counter(func):

    def wrapper(*args, **kwargs):
        global count
        count += 1  # увеличиваем счетчик
        wrapper.count = count
        result = func(*args, **kwargs)
        print(f"Функцию {func.__name__!r} вызвали {wrapper.count} раз")
        return result
    wrapper.count = 0  # Добавляем атрибут счетчика
    return wrapper


@counter
def hello():
    print('Hello')


count = 0
hello()
hello()
print(hello.count)
print(count)

print(dir(__builtins__))
